let STORE = [];
let count = 0;
let currentUpdateCart;
let cardDataArr = [];

const mainForm = document.querySelector(".main-form")
const slider = document.querySelector(".form-slider")
const pMonth = document.querySelector(".form-change-month")
const bidPecent = document.querySelector(".input-form-percent")
const createMoneyBoxButton = document.querySelector(".form-button-ok")
const cancelMoneyBoxButton = document.querySelector(".form-button-cancel")
const needMoney = document.querySelector(".input-form-need")
const haveMoney = document.querySelector(".form-input-have")
const sectionForm = document.querySelector(".form")
const targetInputForm = document.querySelector(".form-input-target")
const resultText = document.querySelector(".p-pay-month");
const buttonOnboarding = document.querySelector('.button-onboarding')
const buttonOpenNewForm = document.querySelector('.footer-button-add-form')
const cardBar = document.querySelector(".card-bar")
const formEdit = document.querySelector('.form-edit')
const formEditTarget = formEdit.querySelector(".form-input-target")
const formEditNeedMoney = formEdit.querySelector(".input-form-need")
const formEditInputHave = formEdit.querySelector(".form-input-have")
const formEditSlider = formEdit.querySelector(".form-slider")
const formEditMonth = formEdit.querySelector(".p-pay-month")
const formEditButtonOk = formEdit.querySelector(".form-button-ok")
const formEditButtonCancel = formEdit.querySelector(".form-button-cancel")
const formEditResultText = formEdit.querySelector(".p-pay-month")
const formEditBidPecent = formEdit.querySelector(".input-form-percent")
const formEditPMonth = formEdit.querySelector(".form-change-month")
const grafica = document.querySelector("#grafica");


slider.addEventListener("input", changeSlider)
slider.addEventListener("change", payment)
needMoney.addEventListener("change", checkInput)
haveMoney.addEventListener("change", checkInput)
needMoney.addEventListener("keyup", checkInput)
haveMoney.addEventListener("keyup", checkInput)
createMoneyBoxButton.addEventListener("click", createMoneyBox)
cancelMoneyBoxButton.addEventListener("click", cancelMoneyBox)
mainForm.addEventListener('submit', dataForm)
buttonOnboarding.addEventListener('click', closeOnbourding)
buttonOpenNewForm.addEventListener('click', openForm)

//–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
function checkInput(event) {
    payment()
}


// –î–µ–ª–∞–µ–º —Ä–∞—Å—á—ë—Ç –∫—Ä–µ–¥–∏—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –±–∞–Ω–∫–∞.
function changeSlider() {
    pMonth.innerText = slider.value + " –º–µ—Å."
    if (slider.value <= 1) {
        bidPecent.value = "5"
    } else if (slider.value % 6 === 0) {
        const z = 5;
        bidPecent.value = `${z + ((slider.value / 6) * 0.5)}`
    }
}

//–ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.
function payment() {
    const needSumm = document.querySelector(".input-form-need").value;
    const haveSumm = document.querySelector(".form-input-have").value;
    let depositPercent = bidPecent.value;
    let depositMonth = slider.value;

    let x = (1 + ((depositPercent * 0.01) / 12));
    let xExponent = Math.pow(x, depositMonth);
    let y = (12 / (depositPercent * 0.01));
    let result = (((needSumm - (haveSumm * xExponent)) / ((xExponent - 1) * y))).toFixed(2);

    if (result === "NaN" || haveSumm === "" || needSumm === "") {
        resultText.innerText = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'
    } else if (needSumm <= 0 || haveSumm < 0) {
        resultText.innerText = "–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º"
        createMoneyBoxButton.disabled = "disabled"
    } else if (needSumm > haveSumm && result < 0) {
        resultText.innerText = `–ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –≤–∫–ª–∞–¥—É - –ø–æ–∑–≤–æ–ª—è—Ç \n –≤–∞–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∫–æ–ø–∏–ª–∫–∏\n –∑–∞ ${slider.value} –º–µ—Å.`
        createMoneyBoxButton.disabled = ""
    }
    else if (result < 0) {
        resultText.innerText = "–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –±–æ–ª–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ —Ç—Ä–µ–±—É–µ–º–æ–π"
        createMoneyBoxButton.disabled = "disabled"
    } else {
        resultText.innerText = `${result} ‚ÇΩ`;
        createMoneyBoxButton.disabled = "";
    }
}


//–§—É–Ω–∫—Ü–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É - –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏–ª–∫—É
function createMoneyBox(event) {
    grafica.style.display = 'none'
    if (needMoney.value == "" || haveMoney.value == "" || targetInputForm.value == "") {
        resultText.innerText = "–ï—Å—Ç—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã–µ –ø–æ–ª—è"
    } else {

        sectionForm.style.display = "none"
    }
}

//–§—É–Ω–∫—Ü–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É –ó–∞–∫—Ä—ã—Ç—å
function cancelMoneyBox(event) {
    sectionForm.style.display = "none"
    needMoney.value = ""
    haveMoney.value = ""
    resultText.innerText = "0 ‚ÇΩ"
    targetInputForm.value = ""
    slider.value = "1"
    pMonth.innerText = "1 –º–µ—Å."

    cardBar.style.display = "flex"
}


//–§—É–Ω–∫—Ü–∏—è –Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ submith. –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã//
function dataForm(event) {

    cardBar.innerHTML = ""
    event.preventDefault();
    const data = new FormData(event.target);
    cardBar.style.display = "flex";
    grafica.style.display = 'none'

    STORE.push({
        id: ++count,
        target: data.get("target"),
        needMoney: data.get("needMoney"),
        haveMoney: data.get("haveMoney"),
        month: data.get("month"),
        percentBank: data.get("percentBank"),
        result: resultText.innerText,
        isOpenGraph: false
    })


    STORE.forEach((item) => {

        const blockCard = document.createElement("div")
        blockCard.classList.add("card")
        const cardTitle = document.createElement("h2")
        cardTitle.classList.add("card__title")
        cardTitle.innerText = `${item.target}`
        const cardSubtitle = document.createElement("p")
        cardSubtitle.classList.add("card__subtitle")
        cardSubtitle.innerHTML = `–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: <span class="card__value">${item.result}</span></p>`
        const buttonWrapper = document.createElement('div')
        buttonWrapper.classList.add("button-wrapper")
        const buttonGraf = document.createElement("button")
        buttonGraf.classList.add("card__graf", "card-btn")
        buttonGraf.innerText = "üìä"
        const buttonRemake = document.createElement("button")
        buttonRemake.classList.add("card__remake", "card-btn")
        buttonRemake.innerText = "‚úèÔ∏è"
        const buttonDelete = document.createElement("button")
        buttonDelete.classList.add("card__delete", "card-btn")
        buttonDelete.innerText = "üóëÔ∏è"


        cardBar.append(blockCard)
        blockCard.append(cardTitle)
        blockCard.append(cardSubtitle)
        blockCard.append(buttonWrapper)
        buttonWrapper.append(buttonGraf)
        buttonWrapper.append(buttonRemake)
        buttonWrapper.append(buttonDelete)

        // ----------------- –∫—É—Å–æ–∫ –∫–æ–¥–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ ------------------------//
        buttonGraf.addEventListener('click', (event) => {
            event.preventDefault();

            let totalAddPayments = parseFloat(item.result) * parseFloat(item.month);
            let firstPayment = parseFloat(item.haveMoney);
            let totalProfit = parseFloat(item.needMoney) - firstPayment - totalAddPayments;

            let labelArr = ["–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂", "–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π", "–¢–æ—Ç–∞–ª –¥–æ—Ö–æ–¥ —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π"];
            let dataArr = {
                data: [firstPayment, totalAddPayments, totalProfit].map((item) => Math.round(item, 2)),

                backgroundColor: [
                    '#494947',
                    '#CB6139',
                    '#C29473',
                ],// –¶–≤–µ—Ç —Ñ–æ–Ω–∞

                borderColor: [
                    '#494947',
                    '#CB6139',
                    '#C29473',
                ],// –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã
                borderWidth: 1,
            };
            grafica.style.display = item.isOpenGraph ? 'none' : 'block'
            item.isOpenGraph = !item.isOpenGraph

            let myChart = new Chart(grafica, {
                type: 'doughnut',// –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∏
                data: {
                    labels: labelArr,
                    datasets: [
                        dataArr,
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        },
                        title: {
                            display: true,
                            text: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –Ω–∞ –≤–∫–ª–∞–¥–µ –ø–æ —Ç–∏–ø—É',
                        }
                    }
                },
            });
        });




        // --------------------------–∫—É—Å–æ–∫ –∫–æ–¥–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ -----------------------------//


        buttonDelete.addEventListener('click', (event) => {
            grafica.style.display = 'none'

            let answer = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–ø–∏–ª–∫—É‚ùì \n–ù–∞–∑–∞–¥  –µ—ë –≤–µ—Ä–Ω—É—Ç—å –Ω–µ–ª—å–∑—è‚ùó\n–ü–æ—Ç–æ–º –ø—Ä–∏–¥—ë—Ç—Å—è –¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é‚ùó')
            if (answer === true) {
                event.target.parentElement.parentElement.remove()
                STORE.splice(STORE.findIndex((cart) => cart.id === item.id), 1)
            }


        })

        buttonRemake.addEventListener('click', (event) => {
            grafica.style.display = 'none'
            event.preventDefault();
            cardBar.style.display = "none";
            formEdit.style.display = "block";
            currentUpdateCart = item.id
            formEditTarget.value = item.target
            formEditNeedMoney.value = item.needMoney
            formEditInputHave.value = item.haveMoney
            formEditSlider.value = item.month
            formEditMonth.innerText = item.result
        })

        formEditNeedMoney.addEventListener("change", checkInput1)
        formEditInputHave.addEventListener("change", checkInput1)
        formEditInputHave.addEventListener("keyup", checkInput1)
        formEditNeedMoney.addEventListener("keyup", checkInput1)
        formEditSlider.addEventListener("input", changeSlider1)
        formEditSlider.addEventListener("change", payment1)


        function changeSlider1() {
            formEditPMonth.innerText = formEditSlider.value + " –º–µ—Å."
            if (formEditSlider <= 1) {
                formEditBidPecent.value = "5"
            } else if (formEditSlider.value % 6 === 0) {
                const z = 5;
                formEditBidPecent.value = `${z + ((formEditSlider.value / 6) * 0.5)}`
            }
        }

        function checkInput1(event) {
            payment1()
        }

        function payment1() {
            const needSumm = formEditNeedMoney.value;
            const haveSumm = formEditInputHave.value;
            let depositPercent = formEditBidPecent.value;
            let depositMonth = formEditSlider.value;

            let x = (1 + ((depositPercent * 0.01) / 12));
            let xExponent = Math.pow(x, depositMonth);
            let y = (12 / (depositPercent * 0.01));
            let result = (((needSumm - (haveSumm * xExponent)) / ((xExponent - 1) * y))).toFixed(2);

            if (result === "NaN" || haveSumm === "" || needSumm === "") {
                formEditResultText.innerText = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'
            } else if (needSumm <= 0 || haveSumm < 0) {
                formEditResultText.innerText = "–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º"
                formEditButtonOk.disabled = "disabled"
            } else if (needSumm > haveSumm && result < 0) {
                formEditResultText.innerText = `–ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –≤–∫–ª–∞–¥—É - –ø–æ–∑–≤–æ–ª—è—Ç \n –≤–∞–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∫–æ–ø–∏–ª–∫–∏üìà\n –∑–∞ ${slider.value} –º–µ—Å.`
                formEditButtonOk.disabled = ""
            }
            else if (result < 0) {
                formEditResultText.innerText = "C—É–º–º–∞ –∏–º–µ—é—â–∏—Ö—Å—è –¥–µ–Ω–µ–≥ - –±–æ–ª—å—à–µ,\n —á–µ–º –≤–∞–º –Ω—É–∂–Ω–æ –∏–ª–∏ —Ä–∞–≤–Ω–∞ —Ç—Ä–µ–±—É–µ–º–æ–π‚ùó"
                formEditButtonOk.disabled = "disabled"
            } else {
                formEditResultText.innerText = `${result} ‚ÇΩ`;
                formEditButtonOk.disabled = "";
            }
        }
    })

    formEditButtonOk.addEventListener('click', (event) => {
        event.preventDefault();
        grafica.style.display = 'none'
        const card = STORE.find((cart) => cart.id === currentUpdateCart)
        card.target = formEditTarget.value
        card.needMoney = formEditNeedMoney.value
        card.haveMoney = formEditInputHave.value
        card.month = formEditSlider.value
        card.result = formEditMonth.innerText
        cardBar.style.display = "flex";
        formEdit.style.display = "none";
        renderCard()
    })


    formEditButtonCancel.addEventListener('click', (event) => {
        grafica.style.display = 'none'

        event.preventDefault();
        cardBar.style.display = "flex";
        formEdit.style.display = "none";
    })


    needMoney.value = ""
    haveMoney.value = ""
    resultText.innerText = "0 ‚ÇΩ"
    targetInputForm.value = ""
    slider.value = "1"
    pMonth.innerText = "1 –º–µ—Å."

}


// –≥—Ä–∞—Ñ–∏–∫ –ø–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º//

function drawDiagram(event) {
    let labelArr = ['Red', 'Orange', 'Yellow', 'Green'];
    console.log(cardDataArr);

    let dataArr = {
        data: cardDataArr,

        backgroundColor: [
            'rgba(163,221,203,0.2)',
            'rgba(232,233,161,0.2)',
            'rgba(230,181,102,0.2)',
            'rgba(229,112,126,0.2)',
        ],// –¶–≤–µ—Ç —Ñ–æ–Ω–∞

        borderColor: [
            'rgba(163,221,203,1)',
            'rgba(232,233,161,1)',
            'rgba(230,181,102,1)',
            'rgba(229,112,126,1)',
        ],// –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã
        borderWidth: 1,
    }

    const myChart = new Chart(grafica, {
        type: 'doughnut',// –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∏
        data: {
            labels: labelArr,
            datasets: [
                dataArr,
            ]
        },

        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –Ω–∞ –≤–∫–ª–∞–¥–µ –ø–æ —Ç–∏–ø—É'
                }
            }
        },
    });
}




// –ö–Ω–æ–ø–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
function closeOnbourding() {
    document.querySelector('.onboarding').style.display = "none"
    sectionForm.style.display = "block"
}

// –∫–Ω–æ–ø–∫–∞ +
function openForm() {
    grafica.style.display = 'none'
    document.querySelector('.onboarding').style.display = "none"
    sectionForm.style.display = "block"
    cardBar.style.display = "none"
    formEdit.style.display = "none"

}



//–§—É–Ω–∫—Ü–∏—è –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏//
function editCard(event) {
    grafica.style.display = 'none'
    cardBar.style.display = "none"
    formEdit.style.display = "none";

}


function renderCard() {
    cardBar.innerHTML = ""
    grafica.style.display = 'none'
    STORE.forEach((item) => {

        const blockCard = document.createElement("div")
        blockCard.classList.add("card")
        const cardTitle = document.createElement("h2")
        cardTitle.classList.add("card__title")
        cardTitle.innerText = `${item.target}`
        const cardSubtitle = document.createElement("p")
        cardSubtitle.classList.add("card__subtitle")
        cardSubtitle.innerHTML = `–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: <span class="card__value">${item.result}</span></p>`
        const buttonWrapper = document.createElement('div')
        buttonWrapper.classList.add("button-wrapper")
        const buttonGraf = document.createElement("button")
        buttonGraf.classList.add("card__graf", "card-btn")
        buttonGraf.innerText = "üìä"
        const buttonRemake = document.createElement("button")
        buttonRemake.classList.add("card__remake", "card-btn")
        buttonRemake.innerText = "‚úèÔ∏è"
        const buttonDelete = document.createElement("button")
        buttonDelete.classList.add("card__delete", "card-btn")
        buttonDelete.innerText = "üóëÔ∏è"


        cardBar.append(blockCard)
        blockCard.append(cardTitle)
        blockCard.append(cardSubtitle)
        blockCard.append(buttonWrapper)
        buttonWrapper.append(buttonGraf)
        buttonWrapper.append(buttonRemake)
        buttonWrapper.append(buttonDelete)

        // ----------------- –∫—É—Å–æ–∫ –∫–æ–¥–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ ------------------------//
        buttonGraf.addEventListener('click', (event) => {
            event.preventDefault();

            let totalAddPayments = parseFloat(item.result) * parseFloat(item.month);
            let firstPayment = parseFloat(item.haveMoney);
            let totalProfit = parseFloat(item.needMoney) - firstPayment - totalAddPayments;

            let labelArr = ["–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂", "–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π", "–¢–æ—Ç–∞–ª –¥–æ—Ö–æ–¥ —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π"];
            let dataArr = {
                data: [firstPayment, totalAddPayments, totalProfit].map((item) => Math.round(item, 2)),

                backgroundColor: [
                    '#494947',
                    '#CB6139',
                    '#C29473',
                ],// –¶–≤–µ—Ç —Ñ–æ–Ω–∞

                borderColor: [
                    '#494947',
                    '#CB6139',
                    '#C29473',
                ],// –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã
                borderWidth: 1,
            };
            grafica.style.display = item.isOpenGraph ? 'none' : 'block'
            item.isOpenGraph = !item.isOpenGraph

            let myChart = new Chart(grafica, {
                type: 'doughnut',// –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∏
                data: {
                    labels: labelArr,
                    datasets: [
                        dataArr,
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        },
                        title: {
                            display: true,
                            text: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –Ω–∞ –≤–∫–ª–∞–¥–µ –ø–æ —Ç–∏–ø—É',
                        }
                    }
                },
            });
        });



        // --------------------------–∫—É—Å–æ–∫ –∫–æ–¥–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ -----------------------------//


        buttonDelete.addEventListener('click', (event) => {
            grafica.style.display = 'none'

            let answer = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–ø–∏–ª–∫—É‚ùì \n–ù–∞–∑–∞–¥  –µ—ë –≤–µ—Ä–Ω—É—Ç—å –Ω–µ–ª—å–∑—è‚ùó\n–ü–æ—Ç–æ–º –ø—Ä–∏–¥—ë—Ç—Å—è –¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é‚ùó')
            if (answer === true) {
                event.target.parentElement.parentElement.remove()
                STORE.splice(STORE.findIndex((cart) => cart.id === item.id), 1)
            }


        })

        buttonRemake.addEventListener('click', (event) => {
            grafica.style.display = 'none'
            event.preventDefault();
            cardBar.style.display = "none";
            formEdit.style.display = "block";
            currentUpdateCart = item.id
            formEditTarget.value = item.target
            formEditNeedMoney.value = item.needMoney
            formEditInputHave.value = item.haveMoney
            formEditSlider.value = item.month
            formEditMonth.innerText = item.result
        })

        formEditNeedMoney.addEventListener("change", checkInput1)
        formEditInputHave.addEventListener("change", checkInput1)
        formEditInputHave.addEventListener("keyup", checkInput1)
        formEditNeedMoney.addEventListener("keyup", checkInput1)
        formEditSlider.addEventListener("input", changeSlider1)
        formEditSlider.addEventListener("change", payment1)


        function changeSlider1() {
            formEditPMonth.innerText = formEditSlider.value + " –º–µ—Å."
            if (formEditSlider <= 1) {
                formEditBidPecent.value = "5"
            } else if (formEditSlider.value % 6 === 0) {
                const z = 5;
                formEditBidPecent.value = `${z + ((formEditSlider.value / 6) * 0.5)}`
            }
        }

        function checkInput1(event) {
            payment1()
        }

        function payment1() {
            const needSumm = formEditNeedMoney.value;
            const haveSumm = formEditInputHave.value;
            let depositPercent = formEditBidPecent.value;
            let depositMonth = formEditSlider.value;

            let x = (1 + ((depositPercent * 0.01) / 12));
            let xExponent = Math.pow(x, depositMonth);
            let y = (12 / (depositPercent * 0.01));
            let result = (((needSumm - (haveSumm * xExponent)) / ((xExponent - 1) * y))).toFixed(2);

            if (result === "NaN" || haveSumm === "" || needSumm === "") {
                formEditResultText.innerText = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'
            } else if (needSumm <= 0 || haveSumm < 0) {
                formEditResultText.innerText = "–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º"
                formEditButtonOk.disabled = "disabled"
            } else if (needSumm > haveSumm && result < 0) {
                formEditResultText.innerText = `–ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –≤–∫–ª–∞–¥—É - –ø–æ–∑–≤–æ–ª—è—Ç \n –≤–∞–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∫–æ–ø–∏–ª–∫–∏üìà\n –∑–∞ ${slider.value} –º–µ—Å.`
                formEditButtonOk.disabled = ""
            } else if (needSumm < haveSumm) {
                formEditResultText.innerText = `–ò–º–µ—é—â–∏–µ—Å—è —Å—É–º–º–∞ –±–æ–ª—å—à–µ –Ω—É–∂–Ω–æ–π.`
                formEditButtonOk.disabled = ""
            } else if (result < 0) {
                formEditResultText.innerText = "C—É–º–º–∞ –∏–º–µ—é—â–∏—Ö—Å—è –¥–µ–Ω–µ–≥ - –±–æ–ª—å—à–µ,\n —á–µ–º –≤–∞–º –Ω—É–∂–Ω–æ –∏–ª–∏ —Ä–∞–≤–Ω–∞ —Ç—Ä–µ–±—É–µ–º–æ–π‚ùó"
                formEditButtonOk.disabled = "disabled"
            } else {
                formEditResultText.innerText = `${result} ‚ÇΩ`;
                formEditButtonOk.disabled = "";
            }
        }
    })

    formEditButtonOk.addEventListener('click', (event) => {
        event.preventDefault();
        grafica.style.display = 'none'
        const card = STORE.find((cart) => cart.id === currentUpdateCart)
        card.target = formEditTarget.value
        card.needMoney = formEditNeedMoney.value
        card.haveMoney = formEditInputHave.value
        card.month = formEditSlider.value
        card.result = formEditMonth.innerText
        cardBar.style.display = "flex";
        formEdit.style.display = "none";
        renderCard()
    })


    formEditButtonCancel.addEventListener('click', (event) => {
        grafica.style.display = 'none'

        event.preventDefault();
        cardBar.style.display = "flex";
        formEdit.style.display = "none";
    })


    needMoney.value = ""
    haveMoney.value = ""
    resultText.innerText = "0 ‚ÇΩ"
    targetInputForm.value = ""
    slider.value = "1"
    pMonth.innerText = "1 –º–µ—Å."
}